{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MarketDataService = /*#__PURE__*/(() => {\n  class MarketDataService {\n    constructor(http) {\n      this.http = http;\n      this.marketDataUrl = 'http://localhost:8083/blue-lion/write/market-data';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** PUT: update market data on the server */\n\n\n    updateMarketData(marketData) {\n      return this.http.put(this.marketDataUrl + \"/\" + marketData.id, marketData, this.httpOptions).pipe(tap(newMarketData => this.log(`updated market data w/ id=${newMarketData.id}`)), catchError(this.handleError('updateMarketData')));\n    }\n    /** POST: add market data on the server */\n\n\n    addMarketData(marketData) {\n      return this.http.post(this.marketDataUrl, marketData, this.httpOptions).pipe(tap(newMarketData => this.log(`added market data w/ id=${newMarketData.id}`)), catchError(this.handleError('addMarketData')));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a RefDataService message*/\n\n\n    log(message) {\n      console.log(`MarketDataService: ${message}`);\n    }\n\n  }\n\n  MarketDataService.ɵfac = function MarketDataService_Factory(t) {\n    return new (t || MarketDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MarketDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketDataService,\n    factory: MarketDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}