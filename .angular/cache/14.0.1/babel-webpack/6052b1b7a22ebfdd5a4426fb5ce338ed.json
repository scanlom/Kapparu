{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as moment from 'moment';\nimport { KapparuGridComponent } from 'src/app/shared/kapparu-grid/kapparu-grid.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/projections.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ag-grid-angular\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/checkbox\";\nimport * as i8 from \"@angular/forms\";\n\nconst _c0 = function (a0) {\n  return [a0];\n};\n\nfunction ProjectionsEditorComponent_div_72_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"ag-grid-angular\", 7);\n    i0.ɵɵlistener(\"gridReady\", function ProjectionsEditorComponent_div_72_Template_ag_grid_angular_gridReady_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onGridReady($event));\n    })(\"rowDataChanged\", function ProjectionsEditorComponent_div_72_Template_ag_grid_angular_rowDataChanged_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onRowDataChanged($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"span\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function ProjectionsEditorComponent_div_72_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const projectionsJournal_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deleteProjectionsJournal(projectionsJournal_r1));\n    });\n    i0.ɵɵtext(6, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function ProjectionsEditorComponent_div_72_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const projectionsJournal_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.editProjectionsJournal(projectionsJournal_r1));\n    });\n    i0.ɵɵtext(8, \"Edit...\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const projectionsJournal_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"rowData\", i0.ɵɵpureFunction1(3, _c0, projectionsJournal_r1))(\"columnDefs\", ctx_r0.columnDefs);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(projectionsJournal_r1.entry);\n  }\n}\n\nexport let ProjectionsEditorComponent = /*#__PURE__*/(() => {\n  class ProjectionsEditorComponent extends KapparuGridComponent {\n    constructor(http, projectionsService) {\n      super();\n      this.http = http;\n      this.projectionsService = projectionsService;\n      this.projectionsJournals = [];\n      this.projectionsJournalId = 0;\n      this.entry = \"\";\n      this.changedEvent = new EventEmitter();\n      this.columnDefs = [this.colDate, {\n        headerName: 'EPS',\n        field: 'eps',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, {\n        headerName: 'DPS',\n        field: 'dps',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, {\n        headerName: 'Growth',\n        field: 'growth',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.percentFormatter\n      }, {\n        headerName: 'PETerminal',\n        field: 'peTerminal',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.numberFormatter\n      }, {\n        headerName: 'Payout',\n        field: 'payout',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.percentFormatter\n      }, {\n        headerName: 'Book',\n        field: 'book',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, {\n        headerName: 'ROE',\n        field: 'roe',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.percentFormatter\n      }, {\n        headerName: 'EPSYr1',\n        field: 'epsYr1',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, {\n        headerName: 'EPSYr2',\n        field: 'epsYr2',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, this.colConfidence, {\n        headerName: 'Price',\n        field: 'price',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, {\n        headerName: 'PE',\n        field: 'pe',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter\n      }, {\n        headerName: 'EPSYield',\n        field: 'epsYield',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.percentFormatter\n      }, {\n        headerName: 'DPSYield',\n        field: 'dpsYield',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.percentFormatter\n      }, this.colCAGR5yr, {\n        headerName: 'CAGR10yr',\n        field: 'cagr10yr',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.percentFormatter\n      }, {\n        headerName: 'Magic',\n        field: 'magic',\n        cellStyle: {\n          textAlign: \"right\"\n        },\n        valueFormatter: this.currencyFormatter,\n        headerTooltip: 'cagr5yr'\n      }];\n    }\n\n    ngOnChanges(changes) {\n      if (changes.rowData && changes.rowData.currentValue) {\n        this.id = this.rowData[0].id;\n        this.refDataId = this.rowData[0].refDataId;\n        this.date = moment().format(\"YYYY-MM-DD\");\n        this.eps = this.rowData[0].eps;\n        this.dps = this.rowData[0].dps;\n        this.growth = this.rowData[0].growth;\n        this.peTerminal = this.rowData[0].peTerminal;\n        this.payout = this.rowData[0].payout;\n        this.book = this.rowData[0].book;\n        this.roe = this.rowData[0].roe;\n        this.epsYr1 = this.rowData[0].epsYr1;\n        this.epsYr2 = this.rowData[0].epsYr2;\n        this.confidence = this.rowData[0].confidence;\n        this.watch = this.rowData[0].watch;\n        this.http.get('http://localhost:8081/blue-lion/read/enriched-projections-journal?projectionsId=' + this.id).subscribe(projectionsJournals => this.projectionsJournals = projectionsJournals);\n      }\n    }\n\n    addProjections() {\n      const that = this;\n\n      if (this.id == 0) {\n        this.projectionsService.addProjections({\n          refDataId: this.refDataId,\n          date: this.date,\n          eps: this.eps,\n          dps: this.dps,\n          growth: this.growth,\n          peTerminal: this.peTerminal,\n          payout: this.payout,\n          book: this.book,\n          roe: this.roe,\n          epsYr1: this.epsYr1,\n          epsYr2: this.epsYr2,\n          confidence: this.confidence,\n          watch: this.watch\n        }).subscribe({\n          next(m) {\n            that.changedEvent.emit();\n          }\n\n        });\n      } else {\n        this.projectionsService.updateProjections({\n          id: this.id,\n          refDataId: this.refDataId,\n          date: this.date,\n          eps: this.eps,\n          dps: this.dps,\n          growth: this.growth,\n          peTerminal: this.peTerminal,\n          payout: this.payout,\n          book: this.book,\n          roe: this.roe,\n          epsYr1: this.epsYr1,\n          epsYr2: this.epsYr2,\n          confidence: this.confidence,\n          watch: this.watch\n        }).subscribe({\n          next(m) {\n            that.changedEvent.emit();\n          }\n\n        });\n      }\n    }\n\n    addProjectionsJournal() {\n      const that = this;\n\n      if (this.projectionsJournalId == 0) {\n        this.projectionsService.addProjectionsJournal({\n          projectionsId: +this.id,\n          date: this.date,\n          entry: this.entry\n        }).subscribe({\n          next(m) {\n            that.clearProjectionsJournal();\n            that.changedEvent.emit();\n          }\n\n        });\n      } else {\n        this.projectionsService.updateProjectionsJournal({\n          id: this.projectionsJournalId,\n          entry: this.entry\n        }).subscribe({\n          next(m) {\n            that.clearProjectionsJournal();\n            that.changedEvent.emit();\n          }\n\n        });\n      }\n    }\n\n    deleteProjectionsJournal(projectionsJournal) {\n      const that = this;\n      this.projectionsService.deleteProjectionsJournal({\n        id: projectionsJournal.id\n      }).subscribe({\n        next(m) {\n          that.changedEvent.emit();\n        }\n\n      });\n    }\n\n    editProjectionsJournal(projectionsJournal) {\n      // This is not a server txn, we're just updating the ui edit box\n      this.entry = projectionsJournal.entry;\n      this.projectionsJournalId = projectionsJournal.id;\n    }\n\n    clearProjectionsJournal() {\n      // This is not a server txn, we're just updating the ui edit box\n      this.entry = \"\";\n      this.projectionsJournalId = 0;\n    }\n\n  }\n\n  ProjectionsEditorComponent.ɵfac = function ProjectionsEditorComponent_Factory(t) {\n    return new (t || ProjectionsEditorComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ProjectionsService));\n  };\n\n  ProjectionsEditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectionsEditorComponent,\n    selectors: [[\"app-projections-editor\"]],\n    inputs: {\n      projectionsJournalId: \"projectionsJournalId\",\n      entry: \"entry\",\n      id: \"id\",\n      rowData: \"rowData\",\n      refDataId: \"refDataId\",\n      date: \"date\",\n      eps: \"eps\",\n      dps: \"dps\",\n      growth: \"growth\",\n      peTerminal: \"peTerminal\",\n      payout: \"payout\",\n      book: \"book\",\n      roe: \"roe\",\n      epsYr1: \"epsYr1\",\n      epsYr2: \"epsYr2\",\n      confidence: \"confidence\",\n      watch: \"watch\"\n    },\n    outputs: {\n      changedEvent: \"changedEvent\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 73,\n    vars: 14,\n    consts: [[\"appearance\", \"outline\"], [\"type\", \"number\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"string\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"appearance\", \"outline\", 2, \"width\", \"98vw\"], [4, \"ngFor\", \"ngForOf\"], [1, \"ag-theme-alpine\", 2, \"width\", \"100%\", \"height\", \"53px\", 3, \"rowData\", \"columnDefs\", \"gridReady\", \"rowDataChanged\"], [2, \"display\", \"inline-block\", \"margin\", \"20px\", \"white-space\", \"pre-wrap\"]],\n    template: function ProjectionsEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\")(1, \"tr\")(2, \"td\")(3, \"mat-form-field\", 0)(4, \"mat-label\");\n        i0.ɵɵtext(5, \"eps\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_6_listener($event) {\n          return ctx.eps = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"td\")(8, \"mat-form-field\", 0)(9, \"mat-label\");\n        i0.ɵɵtext(10, \"dps\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.dps = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"td\")(13, \"mat-form-field\", 0)(14, \"mat-label\");\n        i0.ɵɵtext(15, \"growth\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.growth = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(17, \"td\")(18, \"mat-form-field\", 0)(19, \"mat-label\");\n        i0.ɵɵtext(20, \"peTerminal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_21_listener($event) {\n          return ctx.peTerminal = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"td\")(23, \"mat-form-field\", 0)(24, \"mat-label\");\n        i0.ɵɵtext(25, \"payout\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_26_listener($event) {\n          return ctx.payout = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(27, \"td\")(28, \"mat-form-field\", 0)(29, \"mat-label\");\n        i0.ɵɵtext(30, \"book\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_31_listener($event) {\n          return ctx.book = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(32, \"td\")(33, \"mat-form-field\", 0)(34, \"mat-label\");\n        i0.ɵɵtext(35, \"roe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_36_listener($event) {\n          return ctx.roe = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(37, \"td\")(38, \"mat-form-field\", 0)(39, \"mat-label\");\n        i0.ɵɵtext(40, \"epsYr1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_41_listener($event) {\n          return ctx.epsYr1 = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(42, \"td\")(43, \"mat-form-field\", 0)(44, \"mat-label\");\n        i0.ɵɵtext(45, \"epsYr2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_46_listener($event) {\n          return ctx.epsYr2 = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(47, \"td\")(48, \"mat-form-field\", 0)(49, \"mat-label\");\n        i0.ɵɵtext(50, \"confidence\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_input_ngModelChange_51_listener($event) {\n          return ctx.confidence = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(52, \"td\")(53, \"mat-checkbox\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_mat_checkbox_ngModelChange_53_listener($event) {\n          return ctx.watch = $event;\n        });\n        i0.ɵɵtext(54, \"Watch\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(55, \"p\")(56, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ProjectionsEditorComponent_Template_button_click_56_listener() {\n          return ctx.addProjections();\n        });\n        i0.ɵɵtext(57, \"Update Projections\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(58, \"table\")(59, \"tr\")(60, \"td\");\n        i0.ɵɵtext(61);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(62, \"tr\")(63, \"td\")(64, \"mat-form-field\", 5)(65, \"textarea\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ProjectionsEditorComponent_Template_textarea_ngModelChange_65_listener($event) {\n          return ctx.entry = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(66, \"tr\")(67, \"td\")(68, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ProjectionsEditorComponent_Template_button_click_68_listener() {\n          return ctx.addProjectionsJournal();\n        });\n        i0.ɵɵtext(69, \"Update Journal Entry\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ProjectionsEditorComponent_Template_button_click_70_listener() {\n          return ctx.clearProjectionsJournal();\n        });\n        i0.ɵɵtext(71, \"Clear\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵtemplate(72, ProjectionsEditorComponent_div_72_Template, 9, 5, \"div\", 6);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.eps);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.dps);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.growth);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.peTerminal);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.payout);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.book);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.roe);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.epsYr1);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.epsYr2);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.confidence);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.watch);\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\"Jounral Entry: \", ctx.projectionsJournalId, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.entry);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.projectionsJournals);\n      }\n    },\n    dependencies: [i3.NgForOf, i4.AgGridAngular, i5.MatFormField, i5.MatLabel, i6.MatInput, i7.MatCheckbox, i8.DefaultValueAccessor, i8.NumberValueAccessor, i8.NgControlStatus, i8.NgModel],\n    styles: [\"label[_ngcontent-%COMP%]{display:block;width:6em;margin:.5em 0;color:#607d8b;font-weight:700}input[_ngcontent-%COMP%]{height:2em;font-size:1em;padding-left:.4em}.mat-form-field[_ngcontent-%COMP%]{width:150px}\"]\n  });\n  return ProjectionsEditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}