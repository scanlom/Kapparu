{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MergerService = /*#__PURE__*/(() => {\n  class MergerService {\n    constructor(http) {\n      this.http = http;\n      this.mergerUrl = 'http://localhost:8083/blue-lion/write/mergers/';\n      this.enrichedMergerUrl = 'http://localhost:8083/blue-lion/write/enriched-mergers';\n      this.mergerJournalUrl = 'http://localhost:8083/blue-lion/write/enriched-mergers-journal';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** PUT: update a merger on the server */\n\n\n    updateMerger(merger) {\n      return this.http.put(this.mergerUrl + merger.id, merger, this.httpOptions).pipe(tap(newMerger => this.log(`updated merger w/ id=${newMerger.id}`)), catchError(this.handleError('updateMerger')));\n    }\n    /** POST: add a merger on the server */\n\n\n    addMerger(merger) {\n      return this.http.post(this.enrichedMergerUrl, merger, this.httpOptions).pipe(tap(newMerger => this.log(`added merger w/ id=${newMerger.id}`)), catchError(this.handleError('addMerger')));\n    }\n    /** POST: add a merger journal on the server */\n\n\n    addMergerJournal(mergerJournal) {\n      return this.http.post(this.mergerJournalUrl, mergerJournal, this.httpOptions).pipe(tap(newMergerJournal => this.log(`added merger journal w/ id=${newMergerJournal.id}`)), catchError(this.handleError('addMergerJournal')));\n    }\n    /** PUT: update merger journal on the server */\n\n\n    updateMergerJournal(mergerJournal) {\n      return this.http.put(this.mergerJournalUrl + \"/\" + mergerJournal.id, mergerJournal, this.httpOptions).pipe(tap(newMergerJournal => this.log(`updated Merger journal w/ id=${newMergerJournal.id}`)), catchError(this.handleError('updateMergerJournal')));\n    }\n    /** DELETE: delete a merger journal on the server */\n\n\n    deleteMergerJournal(mergerJournal) {\n      return this.http.delete(this.mergerJournalUrl + \"/\" + mergerJournal.id).pipe(tap(() => this.log(`deleted Merger journal`)), catchError(this.handleError('deleteMergerJournal')));\n    }\n    /**\n    * Handle Http operation that failed.\n    * Let the app continue.\n    * @param operation - name of the operation that failed\n    * @param result - optional value to return as the observable result\n    */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a MergerService message*/\n\n\n    log(message) {\n      console.log(`MergerService: ${message}`);\n    }\n\n  }\n\n  MergerService.ɵfac = function MergerService_Factory(t) {\n    return new (t || MergerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MergerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MergerService,\n    factory: MergerService.ɵfac,\n    providedIn: 'root'\n  });\n  return MergerService;\n})();","map":null,"metadata":{},"sourceType":"module"}