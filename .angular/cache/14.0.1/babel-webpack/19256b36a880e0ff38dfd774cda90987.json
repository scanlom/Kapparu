{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProjectionsService = /*#__PURE__*/(() => {\n  class ProjectionsService {\n    constructor(http) {\n      this.http = http;\n      this.projectionsUrl = 'http://localhost:8083/blue-lion/write/projections';\n      this.projectionsJournalUrl = 'http://localhost:8083/blue-lion/write/enriched-projections-journal';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** POST: add new projections to the server */\n\n\n    addProjections(projections) {\n      return this.http.post(this.projectionsUrl, projections, this.httpOptions).pipe(tap(newProjections => this.log(`added projections w/ id=${newProjections.id}`)), catchError(this.handleError('addProjections')));\n    }\n    /** PUT: update projections on the server */\n\n\n    updateProjections(projections) {\n      return this.http.put(this.projectionsUrl + \"/\" + projections.id, projections, this.httpOptions).pipe(tap(newProjections => this.log(`updated projections w/ id=${newProjections.id}`)), catchError(this.handleError('updateProjections')));\n    }\n    /** POST: add a projections journal on the server */\n\n\n    addProjectionsJournal(projectionsJournal) {\n      return this.http.post(this.projectionsJournalUrl, projectionsJournal, this.httpOptions).pipe(tap(newProjectionsJournal => this.log(`added projections journal w/ id=${newProjectionsJournal.id}`)), catchError(this.handleError('addProjectionsJournal')));\n    }\n    /** PUT: update projections journal on the server */\n\n\n    updateProjectionsJournal(projectionsJournal) {\n      return this.http.put(this.projectionsJournalUrl + \"/\" + projectionsJournal.id, projectionsJournal, this.httpOptions).pipe(tap(newProjectionsJournal => this.log(`updated projections journal w/ id=${newProjectionsJournal.id}`)), catchError(this.handleError('updateProjectionsJournal')));\n    }\n    /** DELETE: delete a projections journal on the server */\n\n\n    deleteProjectionsJournal(projectionsJournal) {\n      return this.http.delete(this.projectionsJournalUrl + \"/\" + projectionsJournal.id).pipe(tap(() => this.log(`deleted projections journal`)), catchError(this.handleError('deleteProjectionsJournal')));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a ProjectionsService message*/\n\n\n    log(message) {\n      console.log(`ProjectionsService: ${message}`);\n    }\n\n  }\n\n  ProjectionsService.ɵfac = function ProjectionsService_Factory(t) {\n    return new (t || ProjectionsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProjectionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectionsService,\n    factory: ProjectionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProjectionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}