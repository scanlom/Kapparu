{"ast":null,"code":"import * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nexport let KapparuGridComponent = /*#__PURE__*/(() => {\n  class KapparuGridComponent {\n    constructor() {\n      // Widths\n      this.percentWidth = 100;\n      this.valueWidth = 100;\n      this.dateWidth = 100;\n      this.tickerWidth = 100;\n      this.descriptionWidth = 200; // Columns\n\n      this.colConfidence = {\n        headerName: 'Confidence',\n        field: 'confidence',\n        cellStyle: params => {\n          switch (params.value) {\n            case 'H':\n              return {\n                backgroundColor: '#7DCEA0'\n              };\n\n            case 'M':\n              return {\n                backgroundColor: '#F7DC6F'\n              };\n\n            case 'B':\n              return {\n                backgroundColor: '#B2BABB'\n              };\n\n            case 'L':\n              return {\n                backgroundColor: '#F1948A'\n              };\n          }\n\n          return null;\n        }\n      };\n      this.colCAGR5yr = {\n        headerName: 'CAGR5yr',\n        field: 'cagr5yr',\n        width: 100,\n        cellStyle: params => {\n          var color = \"#F1948A\";\n\n          if (params.value < 0.05 && params.value >= 0) {\n            color = \"#FADBD8\";\n          } else if (params.value < 0.10 && params.value >= 0.05) {\n            color = \"#D4EFDF\";\n          } else if (params.value >= 0.10) {\n            color = \"#7DCEA0\";\n          }\n\n          return {\n            textAlign: \"right\",\n            backgroundColor: color\n          };\n        },\n        valueFormatter: this.percentFormatter\n      };\n      this.colMergersNetAnnualized = {\n        headerName: 'Annualized',\n        field: 'marketNetReturnAnnualized',\n        width: this.percentWidth,\n        cellStyle: params => {\n          var color = \"#F1948A\";\n\n          if (params.value < 0.04 && params.value >= 0.02) {\n            color = \"#FADBD8\";\n          } else if (params.value < 0.06 && params.value >= 0.04) {\n            color = \"#D4EFDF\";\n          } else if (params.value >= 0.06) {\n            color = \"#7DCEA0\";\n          }\n\n          return {\n            textAlign: \"right\",\n            backgroundColor: color\n          };\n        },\n        valueFormatter: this.percentFormatter\n      };\n      this.colUpdateDate = {\n        headerName: 'Date',\n        field: 'date',\n        width: this.dateWidth,\n        cellStyle: params => {\n          var now = new Date();\n          var date = new Date(params.value);\n          var diff = Math.abs(date.getTime() - now.getTime());\n          var diffDays = Math.ceil(diff / (1000 * 3600 * 24));\n\n          if (diffDays >= 90) {\n            return {\n              backgroundColor: \"#F1948A\"\n            };\n          }\n\n          if (diffDays >= 30) {\n            return {\n              backgroundColor: \"#F7DC6F\"\n            };\n          }\n\n          return null;\n        },\n        valueFormatter: this.dateFormatter\n      };\n      this.colDate = {\n        headerName: 'Date',\n        field: 'date',\n        width: this.dateWidth,\n        valueFormatter: this.dateFormatter\n      };\n\n      this.cellStyleReturns = params => {\n        var color = \"#F1948A\";\n\n        if (params.value < 0.00 && params.value >= -0.02) {\n          color = \"#FADBD8\";\n        } else if (params.value < 0.07 && params.value >= 0.00) {\n          color = \"#D4EFDF\";\n        } else if (params.value >= 0.07) {\n          color = \"#7DCEA0\";\n        }\n\n        return {\n          textAlign: \"right\",\n          backgroundColor: color\n        };\n      };\n    }\n\n    onGridReady(params) {}\n\n    onRowDataChanged(params) {\n      var allColIds = params.columnApi.getAllColumns().map(column => column.colId);\n      params.columnApi.autoSizeColumns(allColIds);\n    }\n\n    colReturns(headerName, field) {\n      return {\n        headerName: headerName,\n        field: field,\n        width: 100,\n        cellStyle: this.cellStyleReturns,\n        valueFormatter: this.percentFormatter\n      };\n    }\n\n    colActual(field) {\n      return {\n        headerName: 'Actual',\n        field: field,\n        width: 70,\n        cellStyle: params => {\n          if (params.data['model'] > 0) {\n            var diff = Math.abs(params.value - params.data['model']);\n            var color = \"#F1948A\";\n\n            if (diff < 0.02 && diff >= 0.01) {\n              color = \"#FADBD8\";\n            } else if (diff < 0.01) {\n              color = \"#D4EFDF\";\n            }\n\n            return {\n              textAlign: \"right\",\n              backgroundColor: color\n            };\n          } else {\n            return {\n              textAlign: \"right\"\n            };\n          }\n        },\n        valueFormatter: this.percentFormatter\n      };\n    } // Formatters\n\n\n    numberFormatter(params) {\n      return params.value.toLocaleString();\n    }\n\n    currencyFormatter(params) {\n      if (params != null && params.value != null) {\n        return params.value.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        });\n      }\n\n      return \"\";\n    }\n\n    divisorFormatter(params) {\n      if (params != null && params.value != null) {\n        return params.value.toLocaleString('en-US', {\n          minimumFractionDigits: 8,\n          maximumFractionDigits: 8\n        });\n      }\n\n      return \"\";\n    }\n\n    percentFormatter(params) {\n      return String((params.value * 100).toFixed(2)) + \"%\";\n    }\n\n    percentIntFormatter(params) {\n      return String((params.value * 100).toFixed(0)) + \"%\";\n    }\n\n    dateFormatter(params) {\n      return moment(params.value).format('YYYY-MM-DD');\n    }\n\n    transactionTypeFormatter(params) {\n      switch (params.value) {\n        case 1:\n          return \"Buy\";\n\n        case 2:\n          return \"Sell\";\n\n        case 3:\n          return \"Dividend\";\n\n        case 4:\n          return \"Cash Infusion\";\n\n        case 5:\n          return \"Debt Infusion\";\n\n        case 6:\n          return \"Interest\";\n      }\n    }\n\n    portfolioIdFormatter(params) {\n      switch (params.value) {\n        case 1:\n          return \"Total\";\n\n        case 2:\n          return \"Selfie\";\n\n        case 3:\n          return \"Oak\";\n\n        case 4:\n          return \"Managed\";\n\n        case 5:\n          return \"Risk Arb\";\n\n        case 6:\n          return \"Trade Fin\";\n\n        case 7:\n          return \"Quick\";\n\n        case 8:\n          return \"Portfolio\";\n\n        case 99:\n          return \"None\";\n      }\n    }\n\n  }\n\n  KapparuGridComponent.ɵfac = function KapparuGridComponent_Factory(t) {\n    return new (t || KapparuGridComponent)();\n  };\n\n  KapparuGridComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: KapparuGridComponent,\n    selectors: [[\"app-kapparu-grid\"]],\n    decls: 0,\n    vars: 0,\n    template: function KapparuGridComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return KapparuGridComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}